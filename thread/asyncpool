import asyncio
import queue
from threading import Thread


class AsyncPool:
    def __init__(self, maxsize=10):
        self.tasks = queue.Queue()
        self.loop = asyncio.new_event_loop()
        self.semaphore = asyncio.Semaphore(maxsize, loop=self.loop)
        self.loop_thread = Thread(target=self.__start_thread_loop)
        self.loop_thread.start()

    def task_add(self):
        self.tasks.put_nowait(None)

    def task_done(self, fn):
        self.tasks.get_nowait()
        self.tasks.task_done()

    def task_wait(self):
        self.tasks.join()

    def running(self):
        return self.tasks.qsize()

    def submit(self, func, callback=None):
        self.task_add()
        future = asyncio.run_coroutine_threadsafe(self.async_semaphore_func(func), loop=self.loop)
        future.add_done_callback(callback)
        future.add_done_callback(self.task_done)

    # 任务阻塞
    async def async_semaphore_func(self, func):
        async with self.semaphore:
            return await func

    # 循环监听任务线程
    def __start_thread_loop(self):
        asyncio.set_event_loop(self.loop)
        self.loop.run_forever()
